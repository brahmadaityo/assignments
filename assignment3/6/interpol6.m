function [] = interpol6()

   x = [0, 0.785, 1.570, 2.356, 3.141, 3.927, 4.712, 5.497, 6.283];
   y = [0, 0.707, 1.000, 0.707, 0, -0.707, -1, -0.707, 0];
  
   a = 'enter 1 to see the cftool plot & 2 to see the interpolate plot';
    A = input(a);
   if (A == 1)
   fprintf('the best fit is given by polynominal of degree 8\n');
   cftool('6.sfit');
   else
    xn = 0:0.12566:6.283; %0.12566 is the interval size
    yn = interp1(x,y,xn,'spline');
    %plot(x,y,'--',xn,yn);
    createfigure(x,y,xn,yn);
    fprintf('the major difference between curve fitting and interpolated data plotting is that \n');
    fprintf('curve fitting gives continious output whereas the interpolation gives a continious input\n upto the last point in the data set');
    fprintf('curve fitting extrapolate the data set \n');
   end;
       
       
end
%%this part have been imported from generate code function of plot by
%%
function createfigure(X1, Y1, X2, Y2)
%CREATEFIGURE(X1, Y1, X2, Y2)
%  X1:  vector of x data
%  Y1:  vector of y data
%  X2:  vector of x data
%  Y2:  vector of y data

%  Auto-generated by MATLAB on 18-Feb-2020 12:42:18

% Create figure
figure1 = figure;

% Create axes
axes1 = axes('Parent',figure1);
hold(axes1,'on');

% Create plot
plot1 = plot(X1,Y1,'DisplayName','unedited data','LineWidth',1,...
    'LineStyle','--',...
    'Color',[1 0 0]);

% Create plot
plot(X2,Y2,'DisplayName','interpolated data','LineWidth',1,'Color',[0 0 0]);

% Get xdata from plot
xdata1 = get(plot1, 'xdata');
% Get ydata from plot
ydata1 = get(plot1, 'ydata');
% Make sure data are column vectors
xdata1 = xdata1(:);
ydata1 = ydata1(:);


% Remove NaN values and warn
nanMask1 = isnan(xdata1(:)) | isnan(ydata1(:));
if any(nanMask1)
    warning('GeneratedCode:IgnoringNaNs', ...
        'Data points with NaN coordinates will be ignored.');
    xdata1(nanMask1) = [];
    ydata1(nanMask1) = [];
end

% Find x values for plotting the fit based on xlim
axesLimits1 = xlim(axes1);
xplot1 = linspace(axesLimits1(1), axesLimits1(2));

% Find coefficients for polynomial (order = 8)
fitResults1 = polyfit(xdata1,ydata1,8);
% Evaluate polynomial
yplot1 = polyval(fitResults1,xplot1);
% Plot the fit
fitLine1 = plot(xplot1,yplot1,'DisplayName','   8th degree',...
    'Tag','8th degree(curve fitted)',...
    'Parent',axes1,...
    'Color',[0.929 0.694 0.125]);

% Set new line in proper position
setLineOrder(axes1,fitLine1,plot1);

box(axes1,'on');
% Create legend
legend1 = legend(axes1,'show');
set(legend1,...
    'Position',[0.638185276686641 0.71255724963341 0.21827411667748 0.212309164855316]);
title(legend1,{'plotting of','interpolated data vs. unedited data'});
end
%-------------------------------------------------------------------------%
function setLineOrder(axesh1, newLine1, associatedLine1)
%SETLINEORDER(AXESH1,NEWLINE1,ASSOCIATEDLINE1)
%  Set line order
%  AXESH1:  axes
%  NEWLINE1:  new line
%  ASSOCIATEDLINE1:  associated line

% Get the axes children
hChildren = get(axesh1,'Children');
% Remove the new line
hChildren(hChildren==newLine1) = [];
% Get the index to the associatedLine
lineIndex = find(hChildren==associatedLine1);
% Reorder lines so the new line appears with associated data
hNewChildren = [hChildren(1:lineIndex-1);newLine1;hChildren(lineIndex:end)];
% Set the children:
set(axesh1,'Children',hNewChildren);

end
